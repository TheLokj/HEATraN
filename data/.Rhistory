cluster_cols = TRUE,
scale = "row",
color = colorRampPalette(c("blue", "white", "red"))(100),
main = "Heatmap des données")
pheatmap(abs_diff,
cluster_cols = TRUE,
scale = "row",
color = colorRampPalette(c("blue", "white", "red"))(100),
main = "Heatmap des données")
heatmap(abs_diff)
abs_diff_mat=as.matrix(abs_diff)
heatmap(abs_diff_mat)
pheatmap(abs_diff,
cluster_cols = TRUE,
color = colorRampPalette(c("blue", "white", "red"))(100),
main = "Heatmap des données")
table(abs_diff)
str(abs_diff)
str(abs_diff)
abs_diff= abs(data_alba[, -1] - data_lamia[, -1])
str(abs_diff)
str(data_alba)
str(data_lamia)
etat1_alba = data_alba[data_alba$State..Emission.order. == 1, -1]
etat2_lamia = data_lamia[data_lamia$State..Emission.order. == 2, -1]
abs_diff_etat2 = abs(etat1_alba - etat2_lamia)
abs_diff_list=list()
etat1_alba=data_alba[data_alba$State..Emission.order. == 1, -1]
for (i in 2:10) {
etat_lamia=data_lamia[data_lamia$State..Emission.order. == i, -1]
abs_diff_list[[paste("diff_etat", i, sep = "_")]]= abs(etat1_alba - etat_lamia)
}
str(abs_diff_list)
View(abs_diff_list)
pheatmap(abs_diff,
cluster_cols = TRUE,
color = colorRampPalette(c("blue", "white", "red"))(100)
)
library(DT)
setwd("/home/naitelam")
library(DT)
library(shiny)
library(shinydashboard)
library(shinydashboard)
server <- function(input, output) {
#
output$downloadData <- downloadHandler(
filename = function() {
paste0(input$dataset, ".csv")
},
content = function(file) {
write.csv(data(), file)
}
)
# tableau réactif, ici le jeu de données  iris
output$tbl <- renderDT({
datatable(iris,
options = list(
lengthChange = TRUE,  # permet de  changer le nombre d'entrées affichées(show)
pageLength = 10,      # Nombre de lignes affichées par défaut
lengthMenu = c(5, 10, 15, 20)  #  le nombre d'entrées a affichier comme options
)
)
})
}
runApp('Application_Lamia_NaitElDjoudi')
gc()
library(DT
library(shinydashboard)
# UI
header <- dashboardHeader(
title = "GeneExpresso",
tags$li(class = "dropdown",
actionLink("help", label = "Aide", icon = icon("question-circle"))
)
)
shiny::runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
library(DT)
library(shiny)
library(shinydashboard)
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
library(plotly)
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
gc()
gc()
gc()
Pi=matrix(c(1/2,1/2,1/2,1/2),byrow = T,row.names=c("B","M"),colnames(=c("B","M")))
Pi=matrix(c(1/2,1/2,1/2,1/2),byrow = T,row.names=c("B","M"),colnames=c("B","M"))
Pi=matrix(c(1/2,1/2,1/2,1/2),byrow = T)
Pi
Pi=matrix(c(1/2,1/2,1/2,1/2),byrow = F)
Pi
Pi=matrix(c(1/2,1/2,1/2,1/2),byrow = F,nrow = 2,ncol = 2)
Pi
Pi=row.names=c("B","M")
Pi=colnames=c("B","M")
Pi
Pi
Pi=matrix(c(1/2,1/2,1/2,1/2),byrow = F,nrow = 2,ncol = 2)
row.names(Pi)=c('B','M')
Pi
col(Pi)=c('B','M')
Pi**5
(1/2)**5
Pi**5
0.03125 +0.03125
help(qt)
help(optim)
help(t.test)
help(chisq.test)
help(qf)
gc()
13*3+12*3+11*3+7*10+9*25+8*48+7*90+6*122+5*237+318*4+3*429+533*2+453+466
13*3+12*3+11*3+7*10+9*25+8*48+7*90+6*122+5*237+318*4+3*429+533*2+453
clear
13*3+12*3+11*3+7*10+9*25+8*48+7*90+6*122+5*237+318*4+3*429+533*2+453
5*10⁵
5*10**5
5*10**5-1498
shiny::runApp('cours_rouen/projet_Rshiny/new_clone/HEATraN/bin')
runApp('cours_rouen/projet_Rshiny/new_clone/HEATraN')
runApp('cours_rouen/projet_Rshiny/new_clone/HEATraN/bin')
runApp('cours_rouen/projet_Rshiny/new_clone/HEATraN/bin')
runApp('cours_rouen/projet_Rshiny/new_clone/HEATraN/bin')
runApp('cours_rouen/projet_Rshiny/new_clone/HEATraN/bin')
runApp('cours_rouen/projet_Rshiny/new_clone/HEATraN/bin')
runApp('cours_rouen/projet_Rshiny/new_clone/HEATraN/bin')
runApp('cours_rouen/projet_Rshiny/new_clone/HEATraN/bin')
runApp('cours_rouen/projet_Rshiny/new_clone/HEATraN/bin')
runApp('cours_rouen/projet_Rshiny/new_clone/HEATraN/bin')
runApp('cours_rouen/projet_Rshiny/new_clone/HEATraN/bin')
runApp('cours_rouen/projet_Rshiny/new_clone/HEATraN/bin')
runApp('cours_rouen/projet_Rshiny/new_clone/HEATraN/bin')
runApp('cours_rouen/projet_Rshiny/new_clone/HEATraN/bin')
runApp('cours_rouen/projet_Rshiny/new_clone/HEATraN/bin')
runApp('cours_rouen/projet_Rshiny/new_clone/HEATraN/bin')
runApp('cours_rouen/projet_Rshiny/new_clone/HEATraN/bin')
runApp('cours_rouen/projet_Rshiny/new_clone/HEATraN/bin')
runApp('cours_rouen/projet_Rshiny/new_clone/HEATraN/bin')
read.table("/home/naitelam/cours_rouen/projet_Rshiny/new_clone/HEATraN/data/exemple.csv",sep = ,header = T)
print(head(df))
df=read.table("/home/naitelam/cours_rouen/projet_Rshiny/new_clone/HEATraN/data/exemple.csv",sep = ,header = T)
print(head(df))
df=read.csv("/home/naitelam/cours_rouen/projet_Rshiny/new_clone/HEATraN/data/exemple.csv",header = T)
print(head(df))
df=read.csv("/home/naitelam/cours_rouen/projet_Rshiny/new_clone/HEATraN/data/exemple.csv",sep=';',header = T)
print(head(df))
print("la longueur de df : \n")
print(dim(df))
input$pvalGO=0.05
v=0.05
df2 <- df[abs(df$Log2FC) > 0 & df$padj < input$v, ]
df2 <- df[abs(df$Log2FC) > 0 & df$padj < v, ]
print(head(df2))
original_gene_list <- df2$Log2FC
print("##########################################2")
print(head(original_gene_list))
print(dim(original_gene_list))
names(original_gene_list) <- df2$GeneID
print(head(original_gene_list))
print(dim(original_gene_list))
print(head(original_gene_list))
original_gene_list
gene_list<-na.omit(original_gene_list)
print(head(original_gene_list))
gene_list = sort(gene_list, decreasing = TRUE)
print("##########################################4")
print(head(gene_list))
#Exctract significant results (padj < 0.05)
sig_genes_df2 = subset(df2, padj < 0.05)
print(head(sig_genes_df2))
dim(df2)
dim(sig_genes_df2)
print(head(sig_genes_df2))
#From significant results, we want to filter on log2fold change
genes <- sig_genes_df2$Log2FC
genes#Name the vector
length(genes)
names(genes) <- sig_genes_df2$GeneID
print(head(genes))
#omit NA values
genes <- na.omit(genes)
print("##########################################7")
print(head(genes))
organism <- "org.Mm.eg.db"
genes <- names(genes)
universe <- names(gene_list)
print("##########################################7")
go_enrich <- enrichGO(
gene = genes,
universe = universe,
OrgDb = organism,
keyType = "ENSEMBL",
readable = TRUE,
ont = "BP",
pvalueCutoff = 0.05,
qvalueCutoff = 0.10
)
print(head(go_enrich))
# # Store results
goResults(go_enrich)
# # Run enrichGO
# # Run enrichGO
library(enrichplot)
# # Run enrichGO
# # Run enrichGO
library(clusterProfiler)
go_enrich <- enrichGO(
gene = genes,
universe = universe,
OrgDb = organism,
keyType = "ENSEMBL",
readable = TRUE,
ont = "BP",
pvalueCutoff = 0.05,
qvalueCutoff = 0.10
)
print(head(go_enrich))
go_enrich
go_enrich <- enrichGO(
gene = genes,
universe = universe,
OrgDb = organism,
keyType = "ENSEMBL",
readable = TRUE,
ont = "BP"
# pvalueCutoff = 0.05,
# qvalueCutoff = 0.10
)
print(head(go_enrich))
go_enrich
library(Mus.musculus)
library("Mus.musculus")
library("org.Mm.eg.db"")
,
ù
mm)
llszldz
library()
q()
install.packages("igraph")
shiny::runApp('cours_rouen/projet_Rshiny/new_clone/HEATraN')
runApp('cours_rouen/projet_Rshiny/new_clone/HEATraN')
runApp('cours_rouen/projet_Rshiny/new_clone/HEATraN')
S <- c(2, 2, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
Y <- c("g", "g", "a", "a", "a", "a", "c", "c", "g", "t", "t", "a", "t", "t", "g", "g", "t", "a", "t", "t", "a", "g", "c", "a", "t", "a", "t", "t", "g", "a", "a", "t",
"t", "t", "t", "t", "a", "c", "a", "a", "a", "t", "g", "t", "t", "a", "t", "a", "g", "a", "a", "t", "a", "a", "a", "c", "t", "t", "a", "a", "g", "g", "a", "t",
"t", "g", "a", "a", "a", "a", "c", "c", "t", "t", "t", "t", "a", "c", "a", "a", "a", "t", "a", "a", "t", "g", "a", "t", "g", "t", "t", "c", "a", "g", "a", "g",
"t", "a", "a", "a", "a", "g", "t", "g", "c", "t", "t", "t", "t", "a", "a", "c", "a", "a", "t", "t", "c", "g", "t", "c", "c", "g", "a", "c", "t", "a", "t", "a",
"a", "t", "a", "c", "a", "t", "a", "a", "c", "a", "a", "t", "a", "a", "a", "a", "c", "a", "t", "a", "g", "g", "c", "t", "t", "a", "t", "t", "t", "t", "a", "c",
"t", "a", "c", "a", "c", "t", "t", "c", "t", "a", "a", "t", "a", "t", "t", "a", "t", "a", "t", "t", "t", "t", "a", "t", "g", "c", "g", "a", "c", "t", "t", "a",
"c", "t", "t", "a", "a", "a", "a", "a")
pini_estime <- table(S) / length(S)
etats <- unique(S)
nb_etats <- length(etats)
P_estime <- matrix(0, nrow=nb_etats, ncol=nb_etats)
for (i in 1:(length(S)-1)) {
P_estime[S[i], S[i+1]] <- P_estime[S[i], S[i+1]] + 1
}
P_estime <- P_estime / rowSums(P_estime)
alphaObs <- c("a", "c", "g", "t")
nb_obs <- length(alphaObs)
b_estime <- matrix(0, nrow=nb_etats, ncol=nb_obs)
for (i in 1:nb_etats) {
obs_dans_etat <- Y[S == i]
obs_counts <- table(obs_dans_etat)
for (j in 1:nb_obs) {
b_estime[i, j] <- ifelse(alphaObs[j] %in% names(obs_counts), obs_counts[alphaObs[j]], 0)
}
}
b_estime <- b_estime / rowSums(b_estime)
cat("Loi initiale estimée:\n")
print(pini_estime)
cat("\nMatrice de transition estimée:\n")
print(P_estime)
cat("\nMatrice des probabilités d'émission estimée:\n")
colnames(b_estime) <- alphaObs
rownames(b_estime) <- paste0("État ", etats)
print(b_estime)
pini_estime
0.9^3
0.8^2*0.1
0.8^2*0.1
# Définition des paramètres du HMM
pi <- c(0.9, 0.1)  # Probabilités initiales : (vrai dé, dé pipé)
A <- matrix(c(0.9, 0.1,
0.2, 0.8),
nrow = 2, byrow = TRUE)  # Matrice de transition
B <- matrix(c(1/6, 1/6, 1/6, 1/6, 1/6, 1/6,   # Probabilités d'émission pour le vrai dé
0.1, 0.1, 0.1, 0.1, 0.1, 0.5),  # Probabilités d'émission pour le dé pipé
nrow = 2, byrow = TRUE)
Y <- c(1, 2, 6)
# Initialisation de la somme des probabilités
prob_total <- 0
for (S1 in 1:2) {
for (S2 in 1:2) {
for (S3 in 1:2) {
prob <- pi[S1] * B[S1, Y[1]] * A[S1, S2] * B[S2, Y[2]] * A[S2, S3] * B[S3, Y[3]]
prob_total <- prob_total + prob
}
}
}
print(paste("Probabilité d'obtenir la séquence (1,2,6) :", prob_total))
setwd("~/Alternance_1/git_tuto/HEATraN")
gc()
getwd(
)
getwd()
# R version : 4.3.3
#library(organism, character.only = TRUE)
library(shiny) #1.9.1
# Developed by LESAGE Louison (@thelokj).
# louison.lesage@univ-rouen.fr
# Student at Rouen Normandy University
# University project 2024-2025
# Last updated : 18/11/2024
# HEATraN version 0.2.0-a.5
# R version : 4.3.3
#library(organism, character.only = TRUE)
library(shiny) #1.9.1
library(shinydashboard) #0.7.2
library(shinyjs) #2.1.0
library(shinyalert) #3.1.0
library(fresh) #0.2.1
library(ggplot2) # 3.5.1
library(readxl) #1.4.3
library(data.table) #1.16.2
library(clusterProfiler)
library(wordcloud)
library(enrichplot)
library(plotly)
library(shinydashboardPlus) # Ajoutez cette ligne
shinyAppDir("bin/")
runApp()
# R version : 4.3.3
library(shiny) #1.9.1
library(shinydashboard) #0.7.2
library(shinyjs) #2.1.0
library(shinyalert) #3.1.0
library(fresh) #0.2.1
library(ggplot2) # 3.5.1
library(readxl) #1.4.3
library(data.table) #1.16.2
shinyAppDir("bin/")
shinyAppDir("bin/")
runApp()
runApp('bin')
runApp('bin')
runApp()
runApp()
# Make sure the bin directory contains the updated ui.R file
shinyAppDir("bin/")
runApp('bin')
runApp('bin')
runApp('bin')
runApp('bin')
runApp('bin')
runApp('bin')
runApp('bin')
runApp('bin')
runApp('bin')
runApp('bin')
runApp('bin')
runApp('bin')
runApp('bin')
runApp('bin')
runApp('bin')
runApp('bin')
runApp('bin')
runApp('bin')
runApp('bin')
runApp('bin')
##########################""""
library(clusterProfiler)
library(patchwork)
library(igraph)
library(ggraph)
organism = "org.Mm.eg.db"
#BiocManager::install(organism, character.only = TRUE)
library(organism, character.only = TRUE)
#reading in input from deseq2
setwd("/home/naitelam/Alternance_1/git_tuto/HEATraN/data")
df = read.csv("/home/naitelam/exemple.csv", header=TRUE,sep = ";")
head(df)
original_gene_list <- df$log2FC
names(original_gene_list) <- df$ID
gene_list<-na.omit(original_gene_list)
#sort the list in decreasing order (required for clusterProfiler)
gene_list = sort(gene_list, decreasing = TRUE)
#Exctract significant results (padj < 0.05)
sig_genes_df = subset(df, padj < 0.05)
#From significant results, we want to filter on log2fold change
genes <- sig_genes_df$log2FC
#Name the vector
names(genes) <- sig_genes_df$ID
#omit NA values
genes <- na.omit(genes)
head(genes)
organism <- "org.Mm.eg.db"
genes <- names(genes)
universe <- names(gene_list)
go_enrich <- enrichGO(
gene = genes,
universe = universe,
OrgDb = organism,
keyType = "ENSEMBL",
readable = TRUE,
ont = "BP",
pvalueCutoff = 0.05,
qvalueCutoff = 0.10
)
# 1) Chord plot - choix de gènes à montrer (adapter selon tes gènes)
show_gene <- c('JUN','SOX2','CD24','TLR4')
fold_change <- df$log2FC
names(fold_change) <- df$ID
names
names(fold_change)
p_chord1 <- plotEnrich(go_enrich, plot_type = "genechord", show_gene = show_gene) +
ggplot2::theme(legend.position = "none")
go_df$GO_level <- godata(organism, ont="BP")@level[go_df$ID]
library(GOSemSim)
library(topGO)
go_df$GO_level <- godata(organism, ont="BP")@level[go_df$ID]
go_df$GO_level <- godata(organism, ont="BP")@level[go_df$ID]
GOdata <- new("topGOdata",
ontology = "BP",
allGenes = gene_list,
geneSelectionFun = function(x)(x < 0.05),
annot = annFUN.org,
mapping = "org.Mm.eg.db",
ID = "ensembl")
resultFisher <- runTest(GOdata, algorithm = "classic", statistic = "fisher")
showSigOfNodes(GOdata, score(resultFisher), firstSigNodes = 5)
printGraph(GOdata)
plotEnrich(go_enrich, plot_type = "gomap", wrap_length = 25,
up_color = '#a32a31',down_color = '#3665a6')
shiny::runApp('~/Alternance_1/git_tuto/HEATraN')
# -----------------------------------------
# Sidebar elements
# -----------------------------------------
p("Click on the Whole Data Inspection menu to access to the second model!")
runApp('~/Alternance_1/git_tuto/HEATraN')
runApp('~/Alternance_1/git_tuto/HEATraN/bin')
runApp('~/Alternance_1/git_tuto/HEATraN/bin')
)
runApp('~/Alternance_1/git_tuto/HEATraN/bin')
runApp('~/Alternance_1/git_tuto/HEATraN/bin')
runApp('~/Alternance_1/git_tuto/HEATraN/bin')
runApp('~/Alternance_1/git_tuto/HEATraN/bin')
runApp('~/Alternance_1/git_tuto/HEATraN/bin')
runApp('~/Alternance_1/git_tuto/HEATraN/bin')
runApp('~/Alternance_1/git_tuto/HEATraN/bin')
runApp('~/Alternance_1/git_tuto/HEATraN/bin')
runApp('~/Alternance_1/git_tuto/HEATraN/bin')
runApp('~/Alternance_1/git_tuto/HEATraN/bin')
runApp('~/Alternance_1/git_tuto/HEATraN/bin')
runApp('~/Alternance_1/git_tuto/HEATraN/bin')
runApp('~/Alternance_1/git_tuto/HEATraN/bin')
runApp('~/Alternance_1/git_tuto/HEATraN/bin')
runApp('~/Alternance_1/git_tuto/HEATraN/bin')
runApp('~/Alternance_1/git_tuto/HEATraN/bin')
runApp('~/Alternance_1/git_tuto/HEATraN/bin')
runApp('~/Alternance_1/git_tuto/HEATraN/bin')
runApp('~/Alternance_1/git_tuto/HEATraN/bin')
runApp('~/Alternance_1/git_tuto/HEATraN/bin')
runApp('~/Alternance_1/git_tuto/HEATraN/bin')
runApp('~/Alternance_1/git_tuto/HEATraN/bin')
runApp('~/Alternance_1/git_tuto/HEATraN/bin')
runApp('~/Alternance_1/git_tuto/HEATraN/bin')
runApp('~/Alternance_1/git_tuto/HEATraN/bin')
runApp('~/Alternance_1/git_tuto/HEATraN/bin')
runApp('~/Alternance_1/git_tuto/HEATraN/bin')
runApp('~/Alternance_1/git_tuto/HEATraN/bin')
