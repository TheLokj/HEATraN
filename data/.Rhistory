#/
data_alba= read.table("/home/naitelam/Alternance_1/emissions_10.txt", sep='\t',header = TRUE)
ggplot(data_all, aes(x=longeur, fill=condition)) +
geom_histogram(position="dodge", bins=50) +
theme_minimal() +
##########
#___emmision_____
#
#/
data_alba= read.table("/home/naitelam/MYOUTPUT/emissions_10.txt", sep='\t',header = TRUE)
str(data_alba)
gc()
ggplot(data_all, aes(x=longeur, fill=condition)) +
geom_histogram(position="dodge", bins=50) +
theme_minimal() +
##########
#___emmision_____
#
#/
data_alba= read.table("/home/naitelam/MYOUTPUT/emissions_10.txt", sep='\t',header = TRUE)
data_alba
ggplot(data_all, aes(x=longeur, fill=condition)) +
geom_histogram(position="dodge", bins=50) +
theme_minimal() +
##########
#___emmision_____
#
#/
list.files("/home/naitelam")
data_alba= read.table("/home/naitelam/MYOUTPUT/emissions_10.txt", sep='\t',header = TRUE)
data_lamia = read.table("/home/naitelam/Alternance_1/learnmodel_10/emissions_10.txt",sep='\t', header = TRUE)
str(data_alba)
str(data_lamia)
library(ggplot2)
help("merge")
data_merged= merge(data_alba, data_lamia, by = "State..Emission.order", suffixes = c("_alba", "_lamia"))
data_merged= merge(data_alba, data_lamia, by = "State..Emission.order.", suffixes = c("_alba", "_lamia"))
View(data_merged)
#  H3K27ac
ggplot(data_merged,aes(x=H3K27ac_alba,y=H3K27ac_lamia))+
geom_point()
ggplot(data_merged, aes(x = H3K27ac_alba, y = H3K27ac_lamia)) +
geom_point() +
geom_smooth(method = "lm", col = "red") +
labs(title = "Comparaison des émissions pour H3K27ac", x = "Alba", y = "Lamia")
cor_H3K27ac= cor(data_alba$H3K27ac, data_lamia$H3K27ac)
cor_H3K4me1= cor(data_alba$H3K4me1, data_lamia$H3K4me1)
cor_H3K36me3= cor(data_alba$H3K36me3, data_lamia$H3K36me3)
cor_H3K27me3= cor(data_alba$H3K27me3, data_lamia$H3K27me3)
cor_H3K9me3= cor(data_alba$H3K9me3, data_lamia$H3K9me3)
cor_data=data.frame(
marque=c("H3K27ac", "H3K4me1", "H3K36me3", "H3K27me3", "H3K9me3"),
R=c(cor_H3K27ac, cor_H3K4me1, cor_H3K36me3, cor_H3K27me3, cor_H3K9me3)
)
View(correlations)
View(cor_data)
str(data_alba)
str(data_lamia)
etat_1_alba = data_alba[data_alba$State..Emission.order. == 3, ]
View(etat_1_alba)
etat_1_lamia = data_lamia[data_lamia$State..Emission.order. == 3, ]
View(etat_1_lamia)
data_merged_1= merge(etat_1_alba, etat_1_lamia, by = "State..Emission.order.", suffixes = c("_alba", "_lamia"))
View(data_merged_1)
str(data_merged_1)
str(data_alba)
str(data_lamia)
marque=c("H3K27ac", "H3K4me1", "H3K36me3", "H3K27me3", "H3K9me3")
correlations = sapply(marque, function(marque) {
cor(merged_data[[paste0(marque, "_alba")]], merged_data[[paste0(marque, "_lamia")]], method = "pearson")
})
cor(data_merged[[paste0(marque, "_alba")]], data_merged[[paste0(marque, "_lamia")]], method = "pearson")
str(data_merged)
correlations = sapply(marque, function(marque) {
cor(data_merged[[paste0(marque, "_alba")]], data_merged[[paste0(marque, "_lamia")]], method = "pearson")
})
# Afficher les corrélations
print(correlations)
str(data_merged)
data_merged_H3K27ac=data_merged[,c(1,2,8)]
View(data_merged_H3K27ac)
str(data_alba)
str(data_lamia)
# Assurez-vous que les noms de colonnes des deux data frames sont les mêmes
common_cols= intersect(names(data_alba), names(data_lamia))
# Réorganisez les colonnes de data_lamia pour correspondre à l'ordre de data_alba
data_lamia = data_lamia[ , common_cols]
# Si vous souhaitez également ordonner data_lamia exactement dans le même ordre que data_alba
data_lamia= data_lamia[ , names(data_alba)]
View(data_alba)
View(data_lamia)
View(cor_data)
cor_H3K27ac= cor(data_alba$H3K27ac, data_lamia$H3K27ac)
cor_H3K4me1= cor(data_alba$H3K4me1, data_lamia$H3K4me1)
cor_H3K36me3= cor(data_alba$H3K36me3, data_lamia$H3K36me3)
cor_H3K27me3= cor(data_alba$H3K27me3, data_lamia$H3K27me3)
cor_H3K9me3= cor(data_alba$H3K9me3, data_lamia$H3K9me3)
cor_data=data.frame(
marque=c("H3K27ac", "H3K4me1", "H3K36me3", "H3K27me3", "H3K9me3"),
R=c(cor_H3K27ac, cor_H3K4me1, cor_H3K36me3, cor_H3K27me3, cor_H3K9me3)
)
View(cor_data)
data_merged= merge(data_alba, data_lamia, by = "State..Emission.order.", suffixes = c("_alba", "_lamia"))
View(data_merged)
str(data_alba)
str(data_lamia)
# Assurez-vous que les deux data frames sont triés de la même manière
data_alba= data_alba[order(data_alba$State..Emission.order.), ]
data_lamia= data_lamia[order(data_lamia$State..Emission.order.), ]
abs_diff= abs(data_alba[, -1] - data_lamia[, -1])
View(abs_diff)
str(abs_diff)
heatmap(abs_diff)
pheatmap(data,
cluster_cols = TRUE,
scale = "row",
color = colorRampPalette(c("blue", "white", "red"))(100),
main = "Heatmap des données")
library(pheatmap)
pheatmap(data,
cluster_cols = TRUE,
scale = "row",
color = colorRampPalette(c("blue", "white", "red"))(100),
main = "Heatmap des données")
pheatmap(abs_diff,
cluster_cols = TRUE,
scale = "row",
color = colorRampPalette(c("blue", "white", "red"))(100),
main = "Heatmap des données")
heatmap(abs_diff)
abs_diff_mat=as.matrix(abs_diff)
heatmap(abs_diff_mat)
pheatmap(abs_diff,
cluster_cols = TRUE,
color = colorRampPalette(c("blue", "white", "red"))(100),
main = "Heatmap des données")
table(abs_diff)
str(abs_diff)
str(abs_diff)
abs_diff= abs(data_alba[, -1] - data_lamia[, -1])
str(abs_diff)
str(data_alba)
str(data_lamia)
etat1_alba = data_alba[data_alba$State..Emission.order. == 1, -1]
etat2_lamia = data_lamia[data_lamia$State..Emission.order. == 2, -1]
abs_diff_etat2 = abs(etat1_alba - etat2_lamia)
abs_diff_list=list()
etat1_alba=data_alba[data_alba$State..Emission.order. == 1, -1]
for (i in 2:10) {
etat_lamia=data_lamia[data_lamia$State..Emission.order. == i, -1]
abs_diff_list[[paste("diff_etat", i, sep = "_")]]= abs(etat1_alba - etat_lamia)
}
str(abs_diff_list)
View(abs_diff_list)
pheatmap(abs_diff,
cluster_cols = TRUE,
color = colorRampPalette(c("blue", "white", "red"))(100)
)
library(DT)
setwd("/home/naitelam")
library(DT)
library(shiny)
library(shinydashboard)
library(shinydashboard)
server <- function(input, output) {
#
output$downloadData <- downloadHandler(
filename = function() {
paste0(input$dataset, ".csv")
},
content = function(file) {
write.csv(data(), file)
}
)
# tableau réactif, ici le jeu de données  iris
output$tbl <- renderDT({
datatable(iris,
options = list(
lengthChange = TRUE,  # permet de  changer le nombre d'entrées affichées(show)
pageLength = 10,      # Nombre de lignes affichées par défaut
lengthMenu = c(5, 10, 15, 20)  #  le nombre d'entrées a affichier comme options
)
)
})
}
runApp('Application_Lamia_NaitElDjoudi')
gc()
library(DT
library(shinydashboard)
# UI
header <- dashboardHeader(
title = "GeneExpresso",
tags$li(class = "dropdown",
actionLink("help", label = "Aide", icon = icon("question-circle"))
)
)
shiny::runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
library(DT)
library(shiny)
library(shinydashboard)
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
library(plotly)
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
runApp('Alternance_1/cours_rouen/RShiny_Lamia_NaitElDjoudi')
gc()
gc()
gc()
Pi=matrix(c(1/2,1/2,1/2,1/2),byrow = T,row.names=c("B","M"),colnames(=c("B","M")))
Pi=matrix(c(1/2,1/2,1/2,1/2),byrow = T,row.names=c("B","M"),colnames=c("B","M"))
Pi=matrix(c(1/2,1/2,1/2,1/2),byrow = T)
Pi
Pi=matrix(c(1/2,1/2,1/2,1/2),byrow = F)
Pi
Pi=matrix(c(1/2,1/2,1/2,1/2),byrow = F,nrow = 2,ncol = 2)
Pi
Pi=row.names=c("B","M")
Pi=colnames=c("B","M")
Pi
Pi
Pi=matrix(c(1/2,1/2,1/2,1/2),byrow = F,nrow = 2,ncol = 2)
row.names(Pi)=c('B','M')
Pi
col(Pi)=c('B','M')
Pi**5
(1/2)**5
Pi**5
0.03125 +0.03125
help(qt)
help(optim)
help(t.test)
help(chisq.test)
help(qf)
gc()
13*3+12*3+11*3+7*10+9*25+8*48+7*90+6*122+5*237+318*4+3*429+533*2+453+466
13*3+12*3+11*3+7*10+9*25+8*48+7*90+6*122+5*237+318*4+3*429+533*2+453
clear
13*3+12*3+11*3+7*10+9*25+8*48+7*90+6*122+5*237+318*4+3*429+533*2+453
5*10⁵
5*10**5
5*10**5-1498
shiny::runApp('Alternance_1/git_tuto/HEATraN')
runApp('Alternance_1/git_tuto/HEATraN')
runApp('Alternance_1/git_tuto/HEATraN/bin')
runApp('Alternance_1/git_tuto/HEATraN/bin')
#install.packages("wordcloud")
library(clusterProfiler)
library(wordcloud)
organism = "org.Mm.eg.db"
#BiocManager::install(organism, character.only = TRUE)
library(organism, character.only = TRUE)
#reading in input from deseq2
setwd("/home/naitelam/Alternance_1/cours_rouen/projet_Rshiny/HEATraN-main/data")
df = read.csv("/home/naitelam/Alternance_1/cours_rouen/projet_Rshiny/HEATraN-main/data/exemple_bon.csv", header=TRUE,sep = ";")
original_gene_list <- df$log2FC
#reading in input from deseq2
setwd("/home/naitelam/Alternance_1/cours_rouen/projet_Rshiny/HEATraN-main/data")
#reading in input from deseq2
setwd("/home/naitelam/Alternance_1/git_tuto/HEATraN-main/data")
#reading in input from deseq2
setwd("/home/naitelam/Alternance_1/git_tuto/HEATraN/data")
df = read.csv("/home/naitelam/exemple.csv", header=TRUE,sep = ";")
original_gene_list <- df$log2FC
names(original_gene_list) <- df$ID
gene_list<-na.omit(original_gene_list)
#sort the list in decreasing order (required for clusterProfiler)
gene_list = sort(gene_list, decreasing = TRUE)
#Exctract significant results (padj < 0.05)
sig_genes_df = subset(df, padj < 0.05)
#From significant results, we want to filter on log2fold change
genes <- sig_genes_df$log2FC
#Name the vector
names(genes) <- sig_genes_df$ID
#omit NA values
genes <- na.omit(genes)
genes
organism <- "org.Mm.eg.db"
genes <- names(genes)
universe <- names(gene_list)
go_enrich <- enrichGO(
gene = genes,
universe = universe,
OrgDb = organism,
keyType = "ENSEMBL",
readable = TRUE,
ont = "BP",
pvalueCutoff = 0.05,
qvalueCutoff = 0.10
)
View(as.data.frame(go_enrich))
runApp('~/Alternance_1/git_tuto/HEATraN/bin')
# R version : 4.3.3
library(org.Mm.eg.db)
runApp('~/Alternance_1/git_tuto/HEATraN')
runApp('~/Alternance_1/git_tuto/HEATraN/bin')
organism = "org.Mm.eg.db"
original_gene_list <- df$log2FC
names(original_gene_list) <- df$ID
gene_list<-na.omit(original_gene_list)
#sort the list in decreasing order (required for clusterProfiler)
gene_list = sort(gene_list, decreasing = TRUE)
#Exctract significant results (padj < 0.05)
sig_genes_df = subset(df, padj < 0.05)
#From significant results, we want to filter on log2fold change
genes <- sig_genes_df$log2FC
#Name the vector
names(genes) <- sig_genes_df$ID
#omit NA values
genes <- na.omit(genes)
genes <- names(genes)
universe <- names(gene_list)
go_enrich <- enrichGO(
gene = genes,
universe = universe,
OrgDb = organism,
keyType = "ENSEMBL",
readable = TRUE,
ont = "BP",
pvalueCutoff = 0.05,
qvalueCutoff = 0.10
)
head(as.data.frame(go_enrich),n=1)
runApp('~/Alternance_1/git_tuto/HEATraN')
runApp('~/Alternance_1/git_tuto/HEATraN/bin')
runApp('~/Alternance_1/git_tuto/HEATraN/bin')
runApp('~/Alternance_1/git_tuto/HEATraN/bin')
df = read.csv("/home/naitelam/exemple.csv", header=TRUE,sep = ";")
head(df,n=1)
original_gene_list <- df$log2FC
names(original_gene_list) <- df$ID
gene_list<-na.omit(original_gene_list)
#sort the list in decreasing order (required for clusterProfiler)
gene_list = sort(gene_list, decreasing = TRUE)
#Exctract significant results (padj < 0.05)
sig_genes_df = subset(df, padj < 0.05)
#From significant results, we want to filter on log2fold change
genes <- sig_genes_df$log2FC
#Name the vector
names(genes) <- sig_genes_df$ID
#omit NA values
genes <- na.omit(genes)
genes
organism <- "org.Mm.eg.db"
genes <- names(genes)
universe <- names(gene_list)
go_enrich <- enrichGO(
gene = genes,
universe = universe,
OrgDb = organism,
keyType = "ENSEMBL",
readable = TRUE,
ont = "BP",
pvalueCutoff = 0.05,
qvalueCutoff = 0.10
)
head(as.data.frame(go_enrich),n=1)
runApp('~/Alternance_1/git_tuto/HEATraN')
runApp('~/Alternance_1/git_tuto/HEATraN')
runApp('~/Alternance_1/git_tuto/HEATraN/bin')
runApp('~/Alternance_1/git_tuto/HEATraN/bin')
runApp('~/Alternance_1/git_tuto/HEATraN/bin')
df = read.csv("/home/naitelam/exemple.csv", header=TRUE,sep = ";")
head(df)
original_gene_list <- df$log2FC
names(original_gene_list) <- df$ID
gene_list<-na.omit(original_gene_list)
#sort the list in decreasing order (required for clusterProfiler)
gene_list = sort(gene_list, decreasing = TRUE)
#Exctract significant results (padj < 0.05)
sig_genes_df = subset(df, padj < 0.05)
#From significant results, we want to filter on log2fold change
genes <- sig_genes_df$log2FC
#Name the vector
names(genes) <- sig_genes_df$ID
#omit NA values
genes <- na.omit(genes)
head(genes)
organism <- "org.Mm.eg.db"
genes <- names(genes)
universe <- names(gene_list)
go_enrich <- enrichGO(
gene = genes,
universe = universe,
OrgDb = organism,
keyType = "ENSEMBL",
readable = TRUE,
ont = "BP",
pvalueCutoff = 0.05,
qvalueCutoff = 0.10
)
head(as.data.frame(go_enrich),n=1)
runApp('~/Alternance_1/git_tuto/HEATraN/bin')
runApp('~/Alternance_1/git_tuto/HEATraN/bin')
runApp('~/Alternance_1/git_tuto/HEATraN/bin')
runApp('~/Alternance_1/git_tuto/HEATraN/bin')
df = read.csv("/home/naitelam/exemple.csv", header=TRUE,sep = ";")
head(df)
original_gene_list <- df$log2FC
names(original_gene_list) <- df$ID
gene_list<-na.omit(original_gene_list)
#sort the list in decreasing order (required for clusterProfiler)
gene_list = sort(gene_list, decreasing = TRUE)
#Exctract significant results (padj < 0.05)
sig_genes_df = subset(df, padj < 0.05)
#From significant results, we want to filter on log2fold change
genes <- sig_genes_df$log2FC
#Name the vector
names(genes) <- sig_genes_df$ID
#omit NA values
genes <- na.omit(genes)
head(genes)
organism <- "org.Mm.eg.db"
genes <- names(genes)
universe <- names(gene_list)
go_enrich <- enrichGO(
gene = genes,
universe = universe,
OrgDb = organism,
keyType = "ENSEMBL",
readable = TRUE,
ont = "BP",
pvalueCutoff = 0.05,
qvalueCutoff = 0.10
)
head(gene_list)
head(as.data.frame(go_enrich),n=1)
runApp('~/Alternance_1/git_tuto/HEATraN/bin')
runApp('~/Alternance_1/git_tuto/HEATraN/bin')
runApp('~/Alternance_1/git_tuto/HEATraN/bin')
head(df)
runApp('~/Alternance_1/git_tuto/HEATraN/bin')
runApp('~/Alternance_1/git_tuto/HEATraN/bin')
runApp('~/Alternance_1/git_tuto/HEATraN/bin')
head(df)
original_gene_list <- df$log2FC
names(original_gene_list) <- df$ID
gene_list<-na.omit(original_gene_list)
#sort the list in decreasing order (required for clusterProfiler)
gene_list = sort(gene_list, decreasing = TRUE)
#Exctract significant results (padj < 0.05)
sig_genes_df = subset(df, padj < 0.05)
#From significant results, we want to filter on log2fold change
genes <- sig_genes_df$log2FC
#Name the vector
names(genes) <- sig_genes_df$ID
#omit NA values
genes <- na.omit(genes)
head(genes)
organism <- "org.Mm.eg.db"
genes <- names(genes)
universe <- names(gene_list)
#
# # Run enrichGO
go_enrich <- enrichGO(
gene = genes,
universe = universe,
OrgDb = organism,
keyType = "ENSEMBL",
readable = TRUE,
ont = "BP",
pvalueCutoff = 0.05,
qvalueCutoff = 0.10
)
#
# # Run enrichGO
help("enrichGO")
runApp('~/Alternance_1/git_tuto/HEATraN/bin')
runApp('~/Alternance_1/git_tuto/HEATraN/bin')
runApp('~/Alternance_1/git_tuto/HEATraN/bin')
runApp('~/Alternance_1/git_tuto/HEATraN/bin')
runApp('~/Alternance_1/git_tuto/HEATraN/bin')
runApp('~/Alternance_1/git_tuto/HEATraN/bin')
head(as.data.frame(go_enrich))
View(as.data.frame(go_enrich))
runApp('~/Alternance_1/git_tuto/HEATraN/bin')
