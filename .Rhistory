X[X["classe",]==1,]
X[X["classe",]==1,]
library(data.table)
X = read.table("~/Téléchargements/X.csv", sep="\t", h=T, row.names=1)
y =read.table("~/Téléchargements/y.csv", sep="\t", h=T)
list = as.list(setNames(y$target, y$biosample_accession))
for (i in 1:length(list)) {
X["classe",names(list)[i]] = list[i][[1]]
}
table(X["classe",])
X = t(X)
table(X$classe)
X$classe
X = as.data.frame(t(X))
table(X$classe)
X = as.data.frame(t(X))
table(X$classe)
X_classe1 = X[X["classe",]==1,]
X_classe1 = X[X$classe==1,]
X_classe0 = X[X$classe==0,]
View(X_classe0)
View(X_classe1)
X_classe1[,1]
ifelse(X_class1[,1]>0)
ifelse(X_classe1[,1]>0)
X_classe1[,1]>0
sum(X_classe1[,1]>0)
sum(na.omit(X_classe1[,1]>0))
for (i in ncol(X)) {
X_classe1["prevalence",i] = sum(na.omit(X_classe1[,i]>0))
}
View(X_classe1)
X_classe1 = na.omit(X[X$classe==1,])
X_classe0 = na.omit(X[X$classe==0,])
for (i in ncol(X)) {
X_classe1["prevalence",i] = sum(na.omit(X_classe1[,i]>0))
}
for (i in 1:ncol(X)) {
X_classe1["prevalence",i] = sum(na.omit(X_classe1[,i]>0))
}
for (i in 1:ncol(X)) {
X_classe0["prevalence_class0",i] = sum(na.omit(X_classe1[,i]>0))
X_classe1["prevalence_class1",i] = sum(na.omit(X_classe1[,i]>0))
}
X_classe0["prevalence_class0",i] = sum(na.omit(X_classe0[,i]>0))
for (i in 1:ncol(X)) {
X_classe0["prevalence_class0",i] = sum(na.omit(X_classe0[,i]>0))
X_classe1["prevalence_class1",i] = sum(na.omit(X_classe1[,i]>0))
}
X_classe1 = na.omit(X[X$classe==1,])
X_classe0 = na.omit(X[X$classe==0,])
for (i in 1:ncol(X)) {
X_classe0["prevalence_class0",i] = sum(na.omit(X_classe0[,i]>0))
X_classe1["prevalence_class1",i] = sum(na.omit(X_classe1[,i]>0))
}
X_classe0["prevalence_class0",]
na.omit(X[X$classe==0,])
View(X_classe0)
X_classe1["prevalence_class1",]
X_classe1["prevalence_class1",]
X_classe1["prevalence_class1",1]
X_classe1["prevalence_class1",1:127]
X_classe1["prevalence_class1",1:1982]
X_classe1["prevalence_class1",1:1981]
X_classe1["prevalence_class1",1:1980]
table(X_classe1["prevalence_class1",]>X_classe0["prevalence_class0",])
table(X_classe1["prevalence_class1",]<X_classe0["prevalence_class0",])
table(X_classe1["prevalence_class1",]>X_classe0["prevalence_class0",])
table(X_classe1["prevalence_class1",]<X_classe0["prevalence_class0",])
View(X)
View(X)
View(X_classe0)
dim(X_classe1["prevalence_class1",])
dim(X_classe1["prevalence_class0",])
table(X_classe1["prevalence_class1",]>X_classe0["prevalence_class0",])
table(X_classe1["prevalence_class1",]<X_classe0["prevalence_class0",])
table(X_classe1["prevalence_class1",]==X_classe0["prevalence_class0",])
X_classe1 = na.omit(X[X$classe==1,])
X_classe0 = na.omit(X[X$classe==0,])
for (i in 1:ncol(X)) {
X_classe0["prevalence_class0",i] = sum(na.omit(X_classe0[,i]))
X_classe1["prevalence_class1",i] = sum(na.omit(X_classe1[,i]))
}
table(X_classe1["prevalence_class1",]>X_classe0["prevalence_class0",])
table(X_classe1["prevalence_class1",]<X_classe0["prevalence_class0",])
shiny::runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN')
library(org.Mm.eg.db)
entrez_ids <- c("246048", "23850", "268902")
symbols <- mapIds(org.Mm.eg.db, keys=entrez_ids, column="SYMBOL", keytype="ENTREZID")
symbols
library(ReactomePA)
mouse_pathways <- names(pathways("mmusculus", "reactome"))  # Organisme selon org2org[3]
grep("IGF transport", mouse_pathways, value=TRUE, ignore.case=TRUE)
BiocManager::install(c(
"ReactomePA>=1.50",
"graphite>=1.44",
"reactome.db>=1.60",
"org.Mm.eg.db>=3.16"
))
enrichment = enrichPathway(genesList, organism=orgs[orgs$organism==organism, "commonName"], universe=data$entrezIds, pvalueCutoff = pval)
runApp('Bureau/Fac/Rshiny/HEATraN')
runApp('Bureau/Fac/Rshiny/HEATraN')
runApp('Bureau/Fac/Rshiny/HEATraN')
runApp('Bureau/Fac/Rshiny/HEATraN')
runApp('Bureau/Fac/Rshiny/HEATraN')
runApp('Bureau/Fac/Rshiny/HEATraN')
runApp('Bureau/Fac/Rshiny/HEATraN')
BiocManager::install(version = "3.18")  # Version Bioconductor 2025
BiocManager::install(version = "3.18")  # Version Bioconductor 2025
BiocManager::install(version = "3.18")  # Version Bioconductor 2025
BiocManager::install(version = "3.18")  # Version Bioconductor 2025
BiocManager::install(version = "3.20")  # Version Bioconductor 2025
shiny::runApp('Bureau/Fac/Rshiny/HEATraN')
if (!requireNamespace("BiocManager"))
install.packages("BiocManager")
BiocManager::install("clusterProfiler")
runApp('Bureau/Fac/Rshiny/HEATraN')
if (!requireNamespace("BiocManager"))
install.packages("BiocManager")
BiocManager::install("ReactomePA")
runApp('Bureau/Fac/Rshiny/HEATraN')
BiocManager::install("pathview")
runApp('Bureau/Fac/Rshiny/HEATraN')
BiocManager::install("org.Mm.eg.db")
runApp('Bureau/Fac/Rshiny/HEATraN')
runApp('Bureau/Fac/Rshiny/HEATraN')
runApp('Bureau/Fac/Rshiny/HEATraN')
ata$ra
runApp('Bureau/Fac/Rshiny/HEATraN')
viewPathway(pathwayDesc[i],
organism="mouse",
readable = F
viewPathway(pathwayDesc[i],
runApp('Bureau/Fac/Rshiny/HEATraN')
runApp('Bureau/Fac/Rshiny/HEATraN')
runApp('Bureau/Fac/Rshiny/HEATraN')
runApp('Bureau/Fac/Rshiny/HEATraN')
runApp('Bureau/Fac/Rshiny/HEATraN')
runApp('Bureau/Fac/Rshiny/HEATraN')
runApp('Bureau/Fac/Rshiny/HEATraN')
runApp('Bureau/Fac/Rshiny/HEATraN')
runApp('Bureau/Fac/Rshiny/HEATraN')
runApp('Bureau/Fac/Rshiny/HEATraN')
entrezIds = bitr(data$GeneID, fromType = "ENSEMBL", toType = "ENTREZID", OrgDb = orgs[orgs$organism==organism, "db"], drop=T)
message(paste(name, "already saved."))
runApp('Bureau/Fac/Rshiny/HEATraN')
runApp('Bureau/Fac/Rshiny/HEATraN')
runApp('Bureau/Fac/Rshiny/HEATraN')
runApp('Bureau/Fac/Rshiny/HEATraN')
runApp('Bureau/Fac/Rshiny/HEATraN')
runApp('Bureau/Fac/Rshiny/HEATraN')
runApp('Bureau/Fac/Rshiny/HEATraN')
shiny::runApp('Bureau/Fac/Rshiny/HEATraN')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
None
NULL
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
shiny::runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN')
runApp('Bureau/Fac/Rshiny/HEATraN')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
From a terminal, you can enter :
getReactomePathway
getReactomePathway
getReactomePathway
viewPathway
viewPathway
?viewPathway
shiny::runApp('Bureau/Fac/Rshiny/HEATraN')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
install.packages("ggtext")
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
showtext_auto()
showtext_auto()
library(showtext)
library(sysfonts)
install.packages("showtext")
install.packages("sysfonts")install.packages("ggtext")
install.packages("showtext")
install.packages("sysfonts")
install.packages("ggtext")
font_add("Mulish", "path/to/Mulish-Regular.ttf")  # Replace with the actual path to the Mulish font file
library(sysfonts)
showtext_auto()
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
library(ggtext)
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
plot.annotation
theme
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
geom_richtext
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN')
install.packages("shinycssloader")
install.packages("shinycssloaders")
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
shiny::runApp('Bureau/Fac/Rshiny/HEATraN')
runApp('Bureau/Fac/Rshiny/HEATraN')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
enrichment()
enrichment()$
enrichment()
enrichment()$
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
"None"[1]
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
shiny::runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
shiny::runApp('Bureau/Fac/Rshiny/HEATraN')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
shiny::runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
shiny::runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN')
runApp('Bureau/Fac/Rshiny/HEATraN')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
if (!is.null(params$gseaPlot) && params$includePATHWAY && params$includeGSEAplots) {
cat("### GSEA plots\n\n")
data <- params$enrichmentData$enrichment
db <- params$enrichmentData$parameters$DB
for (i in 1:length(params$gseaPlot)) {
# Extraction des informations du pathway selon la base de données
if(db == "KEGG") {
pathway_name <- data$ID[i]
pathway_id <- data$ID[i]
} else if(db == "Reactome") {
pathway_name <- data$Description[i]
pathway_id <- data$ID[i]
} else {
# Cas par défaut
pathway_name <- ifelse(!is.null(data$Description[i]), data$Description[i], data$ID[i])
pathway_id <- data$ID[i]
}
# Récupération des p-valeurs et q-valeurs
p_value <- ifelse(!is.null(data$pvalue[i]),
sprintf("p-value: %.4e", data$pvalue[i]),
ifelse(!is.null(data$p.adjust[i]),
sprintf("p-value: %.4e", data$p.adjust[i]),
"p-value: NA"))
q_value <- ifelse(!is.null(data$qvalue[i]),
sprintf("q-value: %.4e", data$qvalue[i]),
ifelse(!is.null(data$qvalues[i]),
sprintf("q-value: %.4e", data$qvalues[i]),
"q-value: NA"))
cat(sprintf("#### %s\n\n", pathway_name))
cat(sprintf("**ID**: %s  \n", pathway_id))
cat(sprintf("**%s**  \n", p_value))
cat(sprintf("**%s**  \n\n", q_value))
print(params$gseaPlot[[i]])
cat("\n\n")
}
}
runApp('Bureau/Fac/Rshiny/HEATraN')
shiny::runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN')
Sys.time()
format(Sys.time(), '%d %B, %Y')
format(Sys.time(), '%d %B, %Y - %h')
format(Sys.time(), '%d %B, %Y - %hH)
format(Sys.time(), '%d %B, %Y - %H)
format(Sys.time(), '%d %B, %Y %H')
format(Sys.time(), '%d %B (%H.%M), %Y')
format(Sys.time(), '%d %B (%H:%M), %Y')
format(Sys.time(), '%d %B (%H:%M:%s), %Y')
format(Sys.time(), '%d %B (%H:%M:%S), %Y')
format(Sys.time(), '%d %B (%H:%M:%S), %Y')
format(Sys.time(), '%d %B (%H:%M:%S), %Y')
format(Sys.time(), '%d %B (%H:%M:%S), %Y')
format(Sys.time(), '%d %B (%H:%M:%S), %Y')
format(Sys.time(), '%d %B (%H:%M), %Y')
shiny::runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN')
shiny::runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
print(generated_files)
shiny::runApp('Bureau/Fac/Rshiny/HEATraN')
runApp('Bureau/Fac/Rshiny/HEATraN')
runApp('Bureau/Fac/Rshiny/HEATraN')
runApp('Bureau/Fac/Rshiny/HEATraN')
runApp('Bureau/Fac/Rshiny/HEATraN')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN')
runApp('Bureau/Fac/Rshiny/HEATraN')
runApp('Bureau/Fac/Rshiny/HEATraN')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
print(enrichment)
runApp('Bureau/Fac/Rshiny/HEATraN')
runApp('Bureau/Fac/Rshiny/HEATraN')
runApp('Bureau/Fac/Rshiny/HEATraN')
if (analysis == "ORA"){
message("Doing an over representation analysis on differentially expressed genes regarding their pathway.")
#--- Preprocess ---#
if ("up" %in% oraInterest & "down" %in% oraInterest) {
message(paste("Analyzing DEG with a Log2FC <", threshold, " and >", threshold, ".", sep=""))
data = data[abs(data$Log2FC)>threshold,]}
else if (oraInterest == "down"){
message(paste("Analyzing DEG with a Log2FC <", threshold, ".", sep=""))
data = data[data$Log2FC<threshold,]}
else if (oraInterest == "up"){
message(paste("Analyzing DEG with a Log2FC >", threshold, ".", sep=""))
data = data[data$Log2FC>threshold,]}
data <- tryCatch({preprocessPathway(data, organism, DB)}, error = function(e) {return(NULL)})
if (is.null(data)){
shinyalert("Database issue", text="Unrecognized ids, please check the selected species or convert your ids using an online converter.", type = "error")
return()
}
genesList = names(data$ranked)[abs(data$ranked)]
#--- Analysis ---#
if (DB == "KEGG"){
enrichment = enrichKEGG(genesList, organism=orgs[orgs$organism==organism, "TLname"], universe=data$entrezIds, pvalueCutoff = pval)
pathway_images <- NULL
if(nrow(enrichment@result) > 0) {
pathway_images <- mapply(function(pathway_id) {
getKEGGpathway(enrichment@result[enrichment@result$ID == pathway_id, "geneID"],
pathway_id,
organism=orgs[orgs$organism==organism, "TLname"],
local=T)
}, enrichment@result$ID, SIMPLIFY=FALSE)
}
}
if (DB == "Reactome"){
enrichment = enrichPathway(genesList, organism=orgs[orgs$organism==organism, "commonName"], universe=data$entrezIds, pvalueCutoff = pval)
pathway_images <- NULL
if(nrow(enrichment@result) > 0) {
pathway_images <- getReactomePathway(data$ranked,
enrichment$ID,
enrichment$Description,
organism=orgs[orgs$organism==organism, "commonName"])
}
}
return(list(enrichment=enrichment, processedData = data, parameters=parameters, pathway_images=pathway_images))
}
runApp('Bureau/Fac/Rshiny/HEATraN')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
shiny::runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
shiny::runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN/bin')
runApp('Bureau/Fac/Rshiny/HEATraN')
